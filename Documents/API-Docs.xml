<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebApplication-mc_02</name>
    </assembly>
    <members>
        <member name="T:WebApplication_mc_02.Controllers.ChatsController">
            <summary>
            Interface with the Chats Database
            </summary>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.ChatsController.GetChat">
            <summary>
            gets a list of all chats
            </summary>
            <returns> list of all chats</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.ChatsController.GetChat(System.Int32)">
            <summary>
            Gets the Chats associated with a student ID
            </summary>
            <param name="id">Chat ID</param>
            <returns>Chats Object</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.ChatsController.PutGroupChat(System.Int32)">
            <summary>
            Create a Chat Group based on Courses
            </summary>
            <param name="studIDs">current studentID</param>
            <returns>'ChatID: {chatID}, {groupChat.Keys.ToList()}'</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.ChatsController.PostChat(WebApplication_mc_02.Models.Chats)">
            <summary>
            sends a chat to the group
            </summary>
            <param name="chat">chat object</param>
            <returns>the chat that was sent</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.ChatsController.DeleteChat(System.Int32)">
            <summary>
            deletes a chat from the database
            </summary>
            <param name="id">Chat ID</param>
            <returns>Chat that was removed</returns>
        </member>
        <member name="T:WebApplication_mc_02.Controllers.CoursesController">
            <summary>
            Interface with the Courses Database
            </summary>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.CoursesController.Get">
            <summary>
            gets the list of all courses
            </summary>
            <returns>a list of courses</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.CoursesController.Get(System.Int32)">
            <summary>
            gets a list of all courses associated with a student ID
            </summary>
            <param name="id">Student ID</param>
            <returns>List of Courses</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.LoginController.PostLogin(WebApplication_mc_02.Models.DTO.Login)">
            <summary>
            Login for a student
            </summary>
            <param name="loginForm"></param>
            <returns>Student ID and Bearer token split buy a space.</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.LoginController.PutLogin(WebApplication_mc_02.Models.DTO.Login)">
            <summary>
            saves a token for the user
            </summary>
            <param name="UserID"></param>
            <param name="Password"></param>
            <returns>token for users access</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.LoginController.Delete">
            <summary>
            Deletes a bearer token from user
            </summary>
        </member>
        <member name="T:WebApplication_mc_02.Controllers.NotificationsController">
            <summary>
            Interface With the Notification Database
            </summary>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.NotificationsController.Get(System.Int32)">
            <summary>
            Gets all of the notifications associate with a student
            </summary>
            <param name="user">Student ID</param>
            <returns>List of Notifications</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.NotificationsController.PutNotification(WebApplication_mc_02.Models.DTO.Notifications)">
            <summary>
            sends a notification
            </summary>
            <param name="noti">Notification Object</param>
            <returns>'Ok' if good or 'client websocket isnt listening and there was an error inserting into Notification Database' if bad</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.NotificationsController.PostFriend(System.Int32,WebApplication_mc_02.Models.DTO.Notifications)">
            <summary>
            sends a friend request
            </summary>
            <param name="studentID">student ID of the friend</param>
            <param name="noti">notification object</param>
            <returns>'Ok' if good 'couldnt delete or insert idk' if bad</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.SQLConnection.update``1(``0)">
            <summary>
            updates SQL database of the given object's key ID with the new data in the object
            </summary>
            <param name="data">the object to be updated in the database</param>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.SQLConnection.insert``1(``0)">
            <summary>
            inserts data into the data type's database
            </summary>
            <param name="data">the object that is to be inserted into the database</param>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.SQLConnection.get``1(System.Type,System.String,System.String)">
            <summary>
            gets the data of the given type from the database and returns a list of them
            </summary>
            <param name="type">the data type denoting the database to read from</param>
            <param name="column">a string that represents the property of the given type and returns the column of that database. If null it assumes all columns</param>
            <param name="filter">a where clause that filters the values to be returned from the database</param>
            <returns>a generic list of the given type</returns>
        </member>
        <member name="T:WebApplication_mc_02.Controllers.StudentsController">
            <summary>
            Interface with the Students Database
            </summary>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.StudentsController.GetStudent(System.Int32)">
            <summary>
            Gets a Student
            </summary>
            <param name="id">Student ID</param>
            <returns>Student Object</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.StudentsController.PutStudent(WebApplication_mc_02.Models.DTO.CreateAccount)">
            <summary>
            Creates a user/Student
            </summary>
            <param name="myuser">CreateAccount Object</param>
            <returns>Student Object associated with the canvas token</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.StudentsController.PostStudent(System.String,WebApplication_mc_02.Models.DTO.Login)">
            /// <summary>
            Creates a user/Student
            </summary>
            <param name="canvasOAuthToken">canvas token</param>
            <param name="loginForm">creates username and password</param>
            <returns>Student Object associated with the canvas token</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.StudentsController.DeleteStudent(System.Int32)">
            <summary>
            removes student from database
            </summary>
            <param name="id">student ID</param>
            <returns>Student object that was removed</returns>
        </member>
        <member name="T:WebApplication_mc_02.Controllers.TestController">
            <summary>
            a test endpoint to make sure that the api is working well
            </summary>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.TestController.Get">
            <summary>
            returns a list of test data
            </summary>
            <returns></returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.TestController.Get(System.Int32)">
            <summary>
            gets a test object
            </summary>
            <param name="id">line number to read</param>
            <returns></returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.TestController.Post(System.String)">
            <summary>
            adds test data to the test data
            </summary>
            <param name="value">string to add</param>
            <returns>'data recieved'</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.TestController.Put(System.String)">
            <summary>
            adds test data to the test data
            </summary>
            <param name="value">string to add</param>
            <returns>'data recieved'</returns>
        </member>
        <member name="M:WebApplication_mc_02.Controllers.TestController.Delete">
            <summary>
            deletes all test data
            </summary>
            <returns>all data in the test</returns>
        </member>
    </members>
</doc>
